function [varargout] = bollBandSIG_DIS(price,period,maType,devUp,devDwn,bigPoint,cost,scaling, hSub)
%BOLLBANDSIG_DIS Returns a trading signal based on the state of price versus upper and lower Bollinger Bands
%   BOLLBANDSIG_DIS returns a trading signal when price crosses from the outside the Bollinger Bands back into
%   the neutral value
%
%   Input 'price' should be of an O | H | L | C form
%
%   Available average types are:
%       -5  Triangle (Double smoothed similar to Hull)
%       -4  Trimmed  (10%)
%       -3  Harmonic
%       -2  Geometric
%       -1	Exponential
%        0  Simple
%       >0  Weighted e.g. 0.5 Square root weighted, 1 = linear, 2 = square weighted
%
%   INPUTS:     price		An M x 1 array of price
%               period      Lookback period (default 20)
%               maType
%               devUp       Number of upward standard deviations (default 2)
%               devDwn      Number of downward standard deviations (default -2)
%               scaling     sharpe ratio adjuster
%               cost        round turn commission cost for proper P&L calculation
%               bigPoint    Full tick dollar value of security
%
%	OUTPUTS:    SIG       	The generated output SIGNAL
%               F           Return generated by the derived signal
%               SH          Sharpe ratio generated by the derived signal
%               LBAND		Lower Bollinger band    (MA - Kstd)
%               MOV         Midline average         (MA)
%               UBAND       Upper Bollinger band    (MA + Kstd)

%% Defaults
if ~exist('period','var'), period = 20; end;
if ~exist('maType','var'), maType = 0; end;
if ~exist('devUp','var'), devUp = 2; end;
if ~exist('devDwn','var'), devDwn = -2; end;
if ~exist('bigPoint','var'), bigPoint = 1; end; 
if ~exist('cost','var'), cost = 0; end;         
if ~exist('scaling','var'), scaling = 1; end;

%% Parse
fClose = OHLCSplitter(price);

[SIG,R,SH,LBAND,MOV,UBAND] = bollBandSIG_mex(price,period,maType,devUp,devDwn,bigPoint,cost,scaling);

if nargin > 0
    %% If no assignment to variable, show the averages in a chart
    if (nargout == 0) && (~exist('hSub','var'))% Plot
    	% Center plot window basis monitor (single monitor calculation)
        scrsz = get(0,'ScreenSize');
        figure('Position',[scrsz(3)*.15 scrsz(4)*.15 scrsz(3)*.7 scrsz(4)*.7])
    
        % Plot results
        ax(1) = subplot(2,1,1);
        plot([fClose,UBAND,MOV,LBAND]);
        axis (ax(1),'tight');
        grid on
        legend('Close',['Upper ',num2str(devUp),'\sigma'],...
                       ['Lower ',num2str(devDwn),'\sigma'],'Location','NorthWest',...
                       ['Midline ',num2str(period),' Type ',num2str(maType)])
        title(['Bollinger Band, Annual Sharpe Ratio = ',num2str(SH,3)])
        
        ax(2) = subplot(2,1,2);
        plot([SIG,cumsum(R)]); grid on
        legend('Position','Cumulative Return','Location','North')
        title(['Final Return = ',thousandSepCash(sum(R))])
        linkaxes(ax,'x')
        
    elseif (nargout == 0) && exist('hSub','var')% Plot as subplot
        % We pass hSub as a string so we can have asymmetrical graphs
        % The call to char() parses the passed cell array
        ax(1) = subplot(str2num(char(hSub(1))), str2num(char(hSub(2))), str2num(char(hSub(3)))); %#ok<ST2NM>
        plot([fClose,UBAND,MOV,LBAND]);
        axis (ax(1),'tight');
        grid on
        legend('Close',['Upper ',num2str(devUp),'\sigma'],...
                       ['Lower ',num2str(devDwn),'\sigma'],'Location','NorthWest',...
                       ['Midline ',num2str(period),' Type ',num2str(maType)])
        title(['Bollinger Band, Annual Sharpe Ratio = ',num2str(SH,3)]')
        
        ax(2) = subplot(str2num(char(hSub(1))),str2num(char(hSub(2))), str2num(char(hSub(4)))); %#ok<ST2NM>
        plot([SIG,cumsum(R)]); grid on
        legend('Position','Cumulative Return','Location','North')
        title(['Final Return = ',thousandSepCash(sum(R))])
        linkaxes(ax,'x')
    else
        for ii = 1:nargout
            switch ii
                case 1
                    varargout{1} = SIG;
                case 2
                    varargout{2} = R;
                case 3
                    varargout{3} = SH;
                case 4
                    varargout{4} = LBAND;
                case 5
                    varargout{5} = MOV;
                case 6
                    varargout{5} = UBAND;
                otherwise
                    warning('bollBandSIG_DIS:OutputArg',...
                        'Too many output arguments requested, ignoring last ones');
            end %switch
        end %for
    end %if
end; %if

%%
%   -------------------------------------------------------------------------
%                                  _    _
%         ___  _ __   ___ _ __    / \  | | __ _  ___   ___  _ __ __ _
%        / _ \| '_ \ / _ \ '_ \  / _ \ | |/ _` |/ _ \ / _ \| '__/ _` |
%       | (_) | |_) |  __/ | | |/ ___ \| | (_| | (_) | (_) | | | (_| |
%        \___/| .__/ \___|_| |_/_/   \_\_|\__, |\___(_)___/|_|  \__, |
%             |_|                         |___/                 |___/
%   -------------------------------------------------------------------------
%        This code is distributed in the hope that it will be useful,
%
%                      	   WITHOUT ANY WARRANTY
%
%                  WITHOUT CLAIM AS TO MERCHANTABILITY
%
%                  OR FITNESS FOR A PARTICULAR PURPOSE
%
%                          expressed or implied.
%
%   Use of this code, pseudocode, algorithmic or trading logic contained
%   herein, whether sound or faulty for any purpose is the sole
%   responsibility of the USER. Any such use of these algorithms, coding
%   logic or concepts in whole or in part carry no covenant of correctness
%   or recommended usage from the AUTHOR or any of the possible
%   contributors listed or unlisted, known or unknown.
%
%   Any reference of this code or to this code including any variants from
%   this code, or any other credits due this AUTHOR from this code shall be
%   clearly and unambiguously cited and evident during any use, whether in
%   whole or in part.
%
%   The public sharing of this code does not relinquish, reduce, restrict or
%   encumber any rights the AUTHOR has in respect to claims of intellectual
%   property.
%
%   IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY
%   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
%   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
%   OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
%   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
%   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
%   ANY WAY OUT OF THE USE OF THIS SOFTWARE, CODE, OR CODE FRAGMENT(S), EVEN
%   IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
%
%   -------------------------------------------------------------------------
%
%                             ALL RIGHTS RESERVED
%
%   -------------------------------------------------------------------------
%
%   Author:        Mark Tompkins
%   Revision:      4919.25056
%   Copyright:     (c)2013
%
