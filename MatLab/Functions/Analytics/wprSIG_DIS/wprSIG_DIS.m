function varargout = wprSIG_DIS(price,N,thresh,bigPoint,cost,scaling,hSub)
%WPRSIG_DIS WPR signal generator from 'willpctr.m' function by The MathWorks, Inc.
% WPRSIG_DIS trading strategy.  Note that the trading signal is generated when the
% WPR value is above/below the upper/lower threshold.
% N serves as an optional lookback period (default 14 observations)
%
%   NOTE: It is important to consider that a WPR signal generator really has 3 states.
%           Above Threshold is Overbought
%           Below Threshold is Oversold
%           There is also a neutral region between +/- Threshold and 50%
%
%   This should be considered prior to adding or removing any Echos to this output.
%   For calculating a direct PNL, the signal should first be cleaned with remEcho_mex.
%
%   INPUTS:
%           price       an array of any [C] or [O | C] or [O | H | L | C]
%           N           observation lookback period
%           thresh      threshold of overbought / oversold (X | [X 100-X] is submitted)
%           scaling     sharpe ratio adjuster
%           cost        round turn commission cost for proper P&L calculation
%           bigPoint    Full tick dollar value of security
%   OUTPUTS:
%           s           The generated output SIGNAL
%           r           Return generated by the derived signal
%           sh          Sharpe ratio generated by the derived signal
%           w           WPR values generated by the call to 'willpctr.m'
%           thresh      Echos the input threshold value (primarily for debugging)
%

if ~exist('scaling','var'), scaling = 1; end
if ~exist('N','var'), N = 14; end
if ~exist('cost','var'), cost = 0; end
if ~exist('bigPoint','var'), bigPoint = 1; end; % default bigPoint

if ~exist('thresh','var')
    % Overbought | Oversold
    thresh = [-20 -80]; % default threshold
else
    % WPR works with negative values in a range from 0 to -100;
    if numel(thresh) == 1 % scalar value
        thresh = [(100-abs(thresh))*-1, abs(thresh)*-1];
    else
        thresh = abs(thresh)*-1;
    end;
    if thresh(1) < thresh(2)
        thresh= thresh(2:-1:1);
    end;
end;

if thresh(1) > 0, thresh(1) = thresh(1) * -1; end;
if thresh(2) > 0, thresh(2) = thresh(2) * -1; end;

if size(price,2) == 4
    [fClose] = OHLCSplitter(price);
else
    error('wprMETS:InputArg',...
        'We need as input O | H | L | C.');
end; %if

%% williams %r
[s,r,sh,w] = wprSIG_mex(price,N,thresh,bigPoint,cost,scaling);

%% Plot if requested
if nargout == 0
	% Center plot window basis monitor (single monitor calculation)
    scrsz = get(0,'ScreenSize');
    figure('Position',[scrsz(3)*.15 scrsz(4)*.15 scrsz(3)*.7 scrsz(4)*.7])
    
    ax(1) = subplot(3,1,1);
    plot(fClose), grid on
    axis (ax(1),'tight');
    legend('Close')
    title(['William''s %R Results, Sharpe Ratio = ',num2str(sh,3)])
    
    ax(2) = subplot(3,1,2);
    plot([w,thresh(1)*ones(size(w)),thresh(2)*ones(size(w))])
    grid on
    legend(['W%R ',num2str(N)],['W%R Upper ',num2str(abs(thresh(2))),'%'],...
        ['W%R Lower ',num2str(abs(thresh(1))),'%'],'Location', 'North')
    title('William''s %R')
    
    ax(3) = subplot(3,1,3);
    plot([s,cumsum(r)]), grid on
    legend('Position','Cumulative Return')
    title(['Final Return = ',thousandSepCash(sum(r))])
    linkaxes(ax,'x')
    
elseif (nargout == 0) && exist('hSub','var')% Plot as subplot
    % We pass hSub as a string so we can have asymmetrical graphs
    % The call to char() parses the passed cell array
    ax(1) = subplot(str2num(char(hSub(1))),str2num(char(hSub(2))),str2num(char(hSub(3)))); %#ok<ST2NM>
    axis (ax(1),'tight');
    plot(fClose), grid on
    axis (ax(1),'tight');
    grid on
    legend('Close')
    title(['William''s %R Results, Sharpe Ratio = ',num2str(sh,3)])
    
    ax(2) = subplot(str2num(char(hSub(1))),str2num(char(hSub(2))),str2num(char(hSub(4)))); %#ok<ST2NM>
    ylim([0 100])
    axis manual;
    hold on;
    plot([w,thresh(1)*ones(size(w)),thresh(2)*ones(size(w))])
    grid on
    legend(['W%R ',num2str(N)],['W%R Upper ',num2str(abs(thresh(2))),'%'],...
        ['W%R Lower ',num2str(abs(thresh(1))),'%'],'Location', 'North')
    title('William''s %R')
    
    ax(3) = subplot(str2num(char(hSub(1))),str2num(char(hSub(2))),str2num(char(hSub(5)))); %#ok<ST2NM>
    plot([s,cumsum(r)]), grid on
    legend('Position','Cumulative Return','Location','North')
    title(['Final Return = ',thousandSepCash(sum(r))])
    linkaxes(ax,'x')
else
    %% Return values
    for i = 1:nargout
        switch i
            case 1
                varargout{1} = s; % signal
            case 2
                varargout{2} = r; % return (pnl)
            case 3
                varargout{3} = sh; % sharpe ratio
            case 4
                varargout{4} = w; % w%r value
            otherwise
                warning('WPR:OutputArg',...
                    'Too many output arguments requested, ignoring last ones');
        end %switch
    end %for
end %if

%%
%   -------------------------------------------------------------------------
%                                  _    _ 
%         ___  _ __   ___ _ __    / \  | | __ _  ___   ___  _ __ __ _ 
%        / _ \| '_ \ / _ \ '_ \  / _ \ | |/ _` |/ _ \ / _ \| '__/ _` |
%       | (_) | |_) |  __/ | | |/ ___ \| | (_| | (_) | (_) | | | (_| |
%        \___/| .__/ \___|_| |_/_/   \_\_|\__, |\___(_)___/|_|  \__, |
%             |_|                         |___/                 |___/
%   -------------------------------------------------------------------------
%        This code is distributed in the hope that it will be useful,
%
%                      	   WITHOUT ANY WARRANTY
%
%                  WITHOUT CLAIM AS TO MERCHANTABILITY
%
%                  OR FITNESS FOR A PARTICULAR PURPOSE
%
%                          expressed or implied.
%
%   Use of this code, pseudocode, algorithmic or trading logic contained
%   herein, whether sound or faulty for any purpose is the sole
%   responsibility of the USER. Any such use of these algorithms, coding
%   logic or concepts in whole or in part carry no covenant of correctness
%   or recommended usage from the AUTHOR or any of the possible
%   contributors listed or unlisted, known or unknown.
%
%   Any reference of this code or to this code including any variants from
%   this code, or any other credits due this AUTHOR from this code shall be
%   clearly and unambiguously cited and evident during any use, whether in
%   whole or in part.
%
%   The public sharing of this code does not relinquish, reduce, restrict or
%   encumber any rights the AUTHOR has in respect to claims of intellectual
%   property.
%
%   IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY
%   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
%   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
%   OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
%   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
%   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
%   ANY WAY OUT OF THE USE OF THIS SOFTWARE, CODE, OR CODE FRAGMENT(S), EVEN
%   IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
%
%   -------------------------------------------------------------------------
%
%                             ALL RIGHTS RESERVED
%
%   -------------------------------------------------------------------------
%
%   Author:        Mark Tompkins
%   Revision:      4906.24976
%   Copyright:     (c)2013
%

