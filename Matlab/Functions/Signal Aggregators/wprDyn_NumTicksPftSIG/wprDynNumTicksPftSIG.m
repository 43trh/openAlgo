function [barsOut,SIG,R,SH] = wprDynNumTicksPftSIG(price,Mult,OB,OS,minTick,numTicks,openAvg,bigPoint,cost,scaling)
%WPRDYNNUMTICKSPFTSIG returns a trading signal for William's Percent R Dynamic with achieved profits
%   %wprDynNumTicksPftSIG returns a trading signal for William's Percent R Dynamic with achieved profits
%   derived from 'wprDynSTA'
%
%   INPUTS:     price       	An array of price in the form [O | H | L | C]     
%               Mult            Modifier to control effective risk based on volatility. (Default: 3)
%                               The higher the value of Mult, the LESS risky. 
%                               Values over 33 are illogical
%               OB              threshold of overbought (default: 30)
%               OS              threshold of oversold (default: 70)
%               minTick         the minimum increment of the asset being analyzed
%               numTicks        the number of ticks to close a position profitably
%               openAvg         the manner in which to calculate profit targets:
%                                   0  per contract (default)
%                                   1  position average
%               bigPoint        Full tick dollar value of security
%               cost            round turn commission cost for proper P&L calculation
%               scaling         sharpe ratio adjuster
%
%   OUTPUTS:
%               barsOut
%               SIG             The generated output SIGNAL
%               R               Return generated by the derived signal
%               SH              Sharpe ratio generated by the derived signal
%
%   [barsOUT,SIG,R,SH] = wprDynNumTicksPftSIG(price,Mult,OB,OS,...
%                                                   minTick,numTicks,openAvg,...
%                                                   bigPoint,cost,scaling)
%
%   NOTE:
%       As this file is designed to be MEX'd all inputs are required.
%       For a graphical result or variable inputs see 'wprDynNumTicksPftSIG_DIS.m'
%
% See also sharpe, wprDynSTA, wprDynSIG, wprDynNumTicksPftSTA, wprDynNumTicksPftSIG_DIS

%% MEX code to be skipped
coder.extrinsic('sharpe','calcProfitLoss','remEchos_mex','OHLCSplitter','numTicksProfit')

%% Process input args
% Preallocate so we can MEX
rows = size(price,1);
STA = zeros(rows,1);                                        %#ok<NASGU>
SIG = zeros(rows,1);
sigWPR = zeros(rows,1);
barsOut = zeros(rows,4);
R = zeros(rows,1);

%% Input with error check
if (minTick < 0)
    error('METS:bollBandNumTicksPftSIG:invalidInputs', ...
        '''minTick'' input was not a positive value. Aborting.');
end; %if

if (numTicks < 0 || floor(numTicks)~= numTicks)
    error('METS:bollBandNumTicksPftSIG:invalidInputs', ...
        '''numTicks'' input was not an integer value >= 0. Aborting.');
end; %if

%% Calculations
% Get wprDyn STA
% Using STA so we don't have multiple calls to calcProfitLoss
STA = wprDynSTA(price,Mult,OB,OS);

% Convert state to signal
sigWPR(STA < 0) = -1.5;
sigWPR(STA > 0) =  1.5;

if(~isempty(find(sigWPR,1)))
	% Clean up repeating information for PNL
	sigWPR = remEchos_mex(sigWPR);
	
     % Pass generated signal vector to profit taking routine
    [barsOut,SIG] = numTicksProfit(price,sigWPR,minTick,numTicks,openAvg);
    
    % Generate PNL
    [~,~,~,R] = calcProfitLoss(barsOut,SIG,bigPoint,cost);
    
    % Calculate sharpe ratio
    SH=scaling*sharpe(R,0);
else
    % No signals - no sharpe.
    SH= 0;
end; %if

%%
%   -------------------------------------------------------------------------
%                                  _    _ 
%         ___  _ __   ___ _ __    / \  | | __ _  ___   ___  _ __ __ _ 
%        / _ \| '_ \ / _ \ '_ \  / _ \ | |/ _` |/ _ \ / _ \| '__/ _` |
%       | (_) | |_) |  __/ | | |/ ___ \| | (_| | (_) | (_) | | | (_| |
%        \___/| .__/ \___|_| |_/_/   \_\_|\__, |\___(_)___/|_|  \__, |
%             |_|                         |___/                 |___/
%   -------------------------------------------------------------------------
%        This code is distributed in the hope that it will be useful,
%
%                      	   WITHOUT ANY WARRANTY
%
%                  WITHOUT CLAIM AS TO MERCHANTABILITY
%
%                  OR FITNESS FOR A PARTICULAR PURPOSE
%
%                          expressed or implied.
%
%   Use of this code, pseudocode, algorithmic or trading logic contained
%   herein, whether sound or faulty for any purpose is the sole
%   responsibility of the USER. Any such use of these algorithms, coding
%   logic or concepts in whole or in part carry no covenant of correctness
%   or recommended usage from the AUTHOR or any of the possible
%   contributors listed or unlisted, known or unknown.
%
%   Any reference of this code or to this code including any variants from
%   this code, or any other credits due this AUTHOR from this code shall be
%   clearly and unambiguously cited and evident during any use, whether in
%   whole or in part.
%
%   The public sharing of this code does not relinquish, reduce, restrict or
%   encumber any rights the AUTHOR has in respect to claims of intellectual
%   property.
%
%   IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY
%   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
%   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
%   OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
%   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
%   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
%   ANY WAY OUT OF THE USE OF THIS SOFTWARE, CODE, OR CODE FRAGMENT(S), EVEN
%   IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
%
%   -------------------------------------------------------------------------
%
%                             ALL RIGHTS RESERVED
%
%   -------------------------------------------------------------------------
%
%   Author:        Mark Tompkins
%   Revision:      4924.21960
%   Copyright:     (c)2013
%


