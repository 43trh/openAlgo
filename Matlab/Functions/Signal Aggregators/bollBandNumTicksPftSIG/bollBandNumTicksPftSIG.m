function [barsOut,SIG,R,SH,LBAND,MOV,UBAND] = bollBandNumTicksPftSIG(price,period,maType,devUp,devDwn,...
                                             minTick,numTicks,openAvg,...
                                             bigPoint,cost,scaling)
%BOLLBANDNUMTICKSPFTSIG returns a trading signal for a simple lead/lag indicator with achieved profits
%   %bollBandNumTicksPftSIG returns a trading signal for a Bollinger Band indicator with achieved profits
%   derived from 'bollBandSTA'
%
%   [barsOUT,SIG,R,SH,LBAND,MOV,UBAND] = bollBandNumTicksPftSIG(price,period,maType,devUp,devDwn,...
%                                            minTick,numTicks,openAvg,...
%                                            bigPoint,cost,scaling)
%
%   INPUTS:     period      Lookback period (default 20)
%               maType      Available average types are:
%                               -5  Triangle (Double smoothed similar to Hull)
%                               -4  Trimmed  (10%)
%                               -3  Harmonic
%                               -2  Geometric
%                               -1	Exponential
%                                0  Simple
%                               >0  Weighted e.g. 0.5 Square root weighted, 1 = linear, 2 = square weighted
%               devUp       Number of upward standard deviations (default 2)
%               devDwn      Number of downward standard deviations (default -2)
%
%	OUTPUTS		barsOut     Transformed vBars that include virtual profit taking entries
%               SIG       	The generated output SIGNAL
%               R           Return generated by the derived signal
%               SH          Sharpe ratio generated by the derived signal
%               LBAND		Lower Bollinger band    (MA - Kstd)
%				MOV         Midline average         (MA)
%               UBAND       Upper Bollinger band    (MA + Kstd)
%
%   NOTE:
%       As this file is designed to be MEX'd all inputs are required.
%       For a graphical result or variable inputs see 'ma2inputsSIG_DIS.m'
%
% See also movavg, sharpe, macd, tsmovavg, ma2inputsSTA, ma2inputsSIG_DIS

%% MEX code to be skipped
coder.extrinsic('sharpe','calcProfitLoss','remEchos_mex','bollBand_mex','bollBandSTA_mex','OHLCSplitter','numTicksProfit')

%% Process input args
% Preallocate so we can MEX
rows = size(price,1);
STA = zeros(rows,1);                                        %#ok<NASGU>
SIG = zeros(rows,1);                                        %#ok<NASGU>
sigBB = zeros(rows,1);                                      
barsOut = zeros(rows,4);                                  	%#ok<NASGU>
LAG = zeros(rows,1);                                        %#ok<NASGU>
UBAND = zeros(rows,1);                                     	
MOV = zeros(rows,1);                                        
LBAND = zeros(rows,1);                                   	
R = zeros(rows,1);

%% Input with error check
if (minTick < 0)
    error('METS:bollBandNumTicksPftSIG:invalidInputs', ...
        '''minTick'' input was not a positive value. Aborting.');
end; %if

if (numTicks < 0 || floor(numTicks)~= numTicks)
    error('METS:bollBandNumTicksPftSIG:invalidInputs', ...
        '''numTicks'' input was not an integer value >= 0. Aborting.');
end; %if

%% Calculations
fClose = OHLCSplitter(price);

% Get bollBand STA
% Using STA so we don't have multiple calls to calcProfitLoss
STA = bollBandSTA_mex(fClose,period,maType,devUp,devDwn);

% Convert state to signal
for ii=2:rows
    if (STA(ii-1) == 1 && STA(ii) == 0)
        sigBB(ii) = -1.5;
    end; %if
    if (STA(ii-1) == -1 && STA(ii) == 0)
        sigBB(ii) = 1.5;
    end; %if
end; %for

if(~isempty(find(sigBB,1)))
    % Clean up repeating information
    sigBB = remEchos_mex(sigBB);
    
    % Pass generated signal vector to profit taking routine
    [barsOut,SIG] = numTicksProfit(price,sigBB,minTick,numTicks,openAvg);
    
    bClose = OHLCSplitter(barsOut);
    
    % Pass vBars to get updated Bollinger Band data
    [LBAND,MOV,UBAND] = bollBand_mex(bClose,period,maType,devUp,devDwn);
    
    % Generate PNL
    [~,~,~,R] = calcProfitLoss(barsOut,SIG,bigPoint,cost);
    
    % Calculate sharpe ratio
    SH=scaling*sharpe(R,0);
else
    barsOut = price;
    SIG = sigBB;
    % No signals - no sharpe.
    SH= 0;
end; %if

%%
%   -------------------------------------------------------------------------
%                                  _    _ 
%         ___  _ __   ___ _ __    / \  | | __ _  ___   ___  _ __ __ _ 
%        / _ \| '_ \ / _ \ '_ \  / _ \ | |/ _` |/ _ \ / _ \| '__/ _` |
%       | (_) | |_) |  __/ | | |/ ___ \| | (_| | (_) | (_) | | | (_| |
%        \___/| .__/ \___|_| |_/_/   \_\_|\__, |\___(_)___/|_|  \__, |
%             |_|                         |___/                 |___/
%   -------------------------------------------------------------------------
%        This code is distributed in the hope that it will be useful,
%
%                      	   WITHOUT ANY WARRANTY
%
%                  WITHOUT CLAIM AS TO MERCHANTABILITY
%
%                  OR FITNESS FOR A PARTICULAR PURPOSE
%
%                          expressed or implied.
%
%   Use of this code, pseudocode, algorithmic or trading logic contained
%   herein, whether sound or faulty for any purpose is the sole
%   responsibility of the USER. Any such use of these algorithms, coding
%   logic or concepts in whole or in part carry no covenant of correctness
%   or recommended usage from the AUTHOR or any of the possible
%   contributors listed or unlisted, known or unknown.
%
%   Any reference of this code or to this code including any variants from
%   this code, or any other credits due this AUTHOR from this code shall be
%   clearly and unambiguously cited and evident during any use, whether in
%   whole or in part.
%
%   The public sharing of this code does not relinquish, reduce, restrict or
%   encumber any rights the AUTHOR has in respect to claims of intellectual
%   property.
%
%   IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY
%   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
%   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
%   OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
%   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
%   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
%   ANY WAY OUT OF THE USE OF THIS SOFTWARE, CODE, OR CODE FRAGMENT(S), EVEN
%   IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
%
%   -------------------------------------------------------------------------
%
%                             ALL RIGHTS RESERVED
%
%   -------------------------------------------------------------------------
%
%   Author:        Mark Tompkins
%   Revision:      4924.21960
%   Copyright:     (c)2013
%


