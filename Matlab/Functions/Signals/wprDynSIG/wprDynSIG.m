function [SIG,R,SH,WPR] = wprDynSIG(price,Mult,OB,OS,bigPoint,cost,scaling)
%WPRDYNSIG Returns a trading signal based on Williams % R with an auto-adjusting dynamic lookback period
%   WPRDYNSIG returns a trading signal based on Williams % R with an auto-adjusting dynamic lookback period
%
%
%   INPUTS:     price       	An array of price in the form [O | H | L | C]     
%               Mult            Modifier to control effective risk based on volatility. (Default: 3)
%                               The higher the value of Mult, the LESS risky. 
%                               Values over 33 are illogical
%               OB              threshold of overbought (default: 30)
%               OS              threshold of oversold (default: 70)
%               scaling         sharpe ratio adjuster
%               cost            round turn commission cost for proper P&L calculation
%               bigPoint        Full tick dollar value of security
%
%   OUTPUTS:
%               SIG             The generated output SIGNAL
%               R               Return generated by the derived signal
%               SH              Sharpe ratio generated by the derived signal
%               WPR             William's Percent R values generated by the call to 'wprDynSTA.m'
%% MEX code to be skipped
coder.extrinsic('sharpe','calcProfitLoss','remEchos_mex','OHLCSplitter')

% Preallocate so we can MEX
rows = size(price,1);
fOpen = zeros(rows,1);               	%#ok<NASGU>
fClose = zeros(rows,1); 				%#ok<NASGU>
WPR = NaN * ones(rows,1);               %#ok<NASGU>
R = zeros(rows,1);						
SIG = zeros(rows,1);					
STA = zeros(rows,1);					%#ok<NASGU>


%% Error check



%% iTrend signal generation using dominant cycle crossing
[STA,WPR] = wprDynSTA(price, Mult, OB, OS);

% Convert state to signal
SIG(STA < 0) = -1.5;
SIG(STA > 0) =  1.5;
    
% Clear erroneous signals calculated prior to enough data
SIG(1:Mult) = 0;
	
if(~isempty(find(SIG,1)))
	% Clean up repeating information for PNL
	SIG = remEchos_mex(SIG);
	
    % Parse price for PNL
    [fOpen,fClose] = OHLCSplitter(price);
    
	% Generate PNL
	[~,~,~,R] = calcProfitLoss([fOpen fClose],SIG,bigPoint,cost);
		
	% Calculate sharpe ratio
	SH=scaling*sharpe(R,0);
else
    % No signals - no sharpe.
    SH= 0;
end; %if

%%
%   -------------------------------------------------------------------------
%                                  _    _
%         ___  _ __   ___ _ __    / \  | | __ _  ___   ___  _ __ __ _
%        / _ \| '_ \ / _ \ '_ \  / _ \ | |/ _` |/ _ \ / _ \| '__/ _` |
%       | (_) | |_) |  __/ | | |/ ___ \| | (_| | (_) | (_) | | | (_| |
%        \___/| .__/ \___|_| |_/_/   \_\_|\__, |\___(_)___/|_|  \__, |
%             |_|                         |___/                 |___/
%   -------------------------------------------------------------------------
%        This code is distributed in the hope that it will be useful,
%
%                      	   WITHOUT ANY WARRANTY
%
%                  WITHOUT CLAIM AS TO MERCHANTABILITY
%
%                  OR FITNESS FOR A PARTICULAR PURPOSE
%
%                          expressed or implied.
%
%   Use of this code, pseudocode, algorithmic or trading logic contained
%   herein, whether sound or faulty for any purpose is the sole
%   responsibility of the USER. Any such use of these algorithms, coding
%   logic or concepts in whole or in part carry no covenant of correctness
%   or recommended usage from the AUTHOR or any of the possible
%   contributors listed or unlisted, known or unknown.
%
%   Any reference of this code or to this code including any variants from
%   this code, or any other credits due this AUTHOR from this code shall be
%   clearly and unambiguously cited and evident during any use, whether in
%   whole or in part.
%
%   The public sharing of this code does not relinquish, reduce, restrict or
%   encumber any rights the AUTHOR has in respect to claims of intellectual
%   property.
%
%   IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY
%   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
%   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
%   OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
%   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
%   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
%   ANY WAY OUT OF THE USE OF THIS SOFTWARE, CODE, OR CODE FRAGMENT(S), EVEN
%   IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
%
%   -------------------------------------------------------------------------
%
%                             ALL RIGHTS RESERVED
%
%   -------------------------------------------------------------------------
%
%   Author:        Mark Tompkins
%   Revision:      5332.10551
%   Copyright:     (c)2014
%

